<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd">

	<flow name="memberInquiryValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['fromMember'] != null]" />
				<expression-filter expression="#[originalPayload['token'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<flow-ref name="accessValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<choice>
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload.'requestAuth')]">
						<flow-ref name="hashValidation" />
						<message-filter onUnaccepted="requestValidationFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" />
						<flow-ref name="memberInquiryConfigFlow" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="DEBUG" message="[SKIP HASH Validation]" />
				<set-payload value="#[originalPayload]" />
				<flow-ref name="memberInquiryConfigFlow" />
			</otherwise>
		</choice>
	</flow>

	<flow name="memberRegisterValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['name'] != null]" />
				<expression-filter expression="#[originalPayload['email'] != null]" />
				<expression-filter expression="#[originalPayload['otp'] != null]" />
				<expression-filter expression="#[originalPayload['ticketID'] != null]" />
				<expression-filter expression="#[originalPayload['token'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<expression-component doc:name="Expression">
			<![CDATA[
			regMap = new java.util.HashMap();
			regMap['methodType']= 'GET';			
			regMap['name']= 'RegisterRequestMap';
			regMap['key']= originalPayload['ticketID'];
			payload = regMap;]]>
		</expression-component>
		<pooled-component>
			<spring-object bean="CacheProcessor" />
		</pooled-component>

		<choice>
			<when>
				<and-filter>
					<expression-filter expression="#[payload != null]" />
					<expression-filter expression="#[payload['otp'] == originalPayload['otp']]" />
				</and-filter>
				<expression-transformer
					expression="#[originalPayload['msisdn']=payload['msisdn'];originalPayload]"
					doc:name="Expression" />
				<set-payload value="ALLOWED" />
			</when>
			<otherwise>
				<set-payload value="INVALID_OTP" />
			</otherwise>
		</choice>

		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<set-variable
			value="#[GroupID = (originalPayload['groupID'] == null) ? globalConfig['member.default.group.id'] : originalPayload['groupID']]"
			variableName="GroupID" doc:name="Variable" />
		<expression-transformer
			expression="#[originalPayload['groupID']=flowVars['GroupID'];originalPayload]"
			doc:name="Expression" />

		<set-variable
			value="#[GroupID = (originalPayload['extID'] == null) ? originalPayload['username'] : originalPayload['extID']]"
			variableName="extID" doc:name="Variable" />
		<expression-transformer
			expression="#[originalPayload['extID']=flowVars['extID'];originalPayload]"
			doc:name="Expression" />

		<choice>
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload.'requestAuth')]">
						<flow-ref name="hashValidation" />
						<message-filter onUnaccepted="requestValidationFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" />
						<flow-ref name="memberRegisterConfigFlow" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="DEBUG" message="[SKIP HASH Validation]" />
				<set-payload value="#[originalPayload]" />
				<flow-ref name="memberRegisterConfigFlow" />
			</otherwise>
		</choice>
	</flow>

	<flow name="memberRegisterReqValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['msisdn'] != null]" />
				<expression-filter expression="#[originalPayload['token'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<choice>
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload.'requestAuth')]">
						<flow-ref name="hashValidation" />
						<message-filter onUnaccepted="requestValidationFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" />
						<flow-ref name="memberRegisterRequestConfigFlow" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="DEBUG" message="[SKIP HASH Validation]" />
				<set-payload value="#[originalPayload]" />
				<flow-ref name="memberRegisterRequestConfigFlow" />
			</otherwise>
		</choice>
	</flow>

	<flow name="memberKYCRequestValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['fromMember'] != null]" />
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['idCardNo'] != null]" />
				<expression-filter expression="#[originalPayload['file1'] != null]" />
				<expression-filter expression="#[originalPayload['file2'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<flow-ref name="accessValidation" doc:name="Flow Reference" />
		<message-filter onUnaccepted="requestValidationFlow"
			doc:name="Message">
			<expression-filter expression="#[payload == 'ALLOWED']" />
		</message-filter>

		<choice>
			<when expression="#[originalPayload['validateHash'] == true]">
				<choice>
					<when
						expression="#[org.mule.util.StringUtils.isNotEmpty(originalPayload.'requestAuth')]">
						<flow-ref name="hashValidation" />
						<message-filter onUnaccepted="requestValidationFlow"
							doc:name="Message">
							<expression-filter expression="#[payload == 'ALLOWED']" />
						</message-filter>
						<set-payload value="#[originalPayload]" />
						<flow-ref name="memberKYCConfigFlow" />
					</when>
					<otherwise>
						<flow-ref name="invalidParameterFlow" />
					</otherwise>
				</choice>
			</when>
			<otherwise>
				<logger level="DEBUG" message="[SKIP HASH Validation]" />
				<set-payload value="#[originalPayload]" />
				<flow-ref name="memberKYCConfigFlow" />
			</otherwise>
		</choice>
	</flow>

</mule>
